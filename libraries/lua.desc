library = Library.new(name: "lua", version: "5.1.5")
library.license   = Licenses::MIT
library.archive   = "#{library.name}-#{library.version}.tar.gz"
library.url       = "http://www.lua.org/ftp/#{library.archive}" 
library.verifier  = Verifier::MD5("2e115fe26e435e33b0d5c022e4490567") #5.1.5

# Anonymous block for environment preservation
begin
	require "fileutils"

	make = "make"
	if (ENV['MSYSTEM']||"").match(/MINGW32/) then
		make = "mingw32-make"
	elsif (ENV['MSYSTEM']||"").match(/MINGW64/) then
		make = "mingw64-make"
	end
	

	platform = 'generic'

	class LuaBuilder < LBT::Step
		def initialize platform, make
			@platform = platform
			@make = make
		end
		def run
			Dir.chdir "#{@library.work_dir}/#{@library.build_subdir}"
			env = {}
			env["CC"] = @library.options.CC.join if @library.options.CC.length > 0
			env['MAKE'] = @make unless env and not env['MAKE'].nil?

			# The 'ar' linker for lua must include the parameters.
			if @library.options.AR.length > 0
				@library.options.AR = "#{@library.options.AR.first} rcu"
			end

			# For Android...
			#http://lua-users.org/lists/lua-l/2012-08/msg00094.html
			# This would work for 5.2 I guess...
			#File.open("src/luaconf.h", "a") do |file|
			#	file.puts "#define getlocaledecpoint() '.' "
			#end

			# HACK !
			if $libbuildtool_params.platform_name == "Android"
				@platform = "generic"
				patches = []
					patches << %q{
--- old/src/llex.c	2009-11-23 09:58:22.000000000 -0500
+++ new/src/llex.c	2014-03-09 16:56:59.000000000 -0400
@@ -181 +181 @@
-  struct lconv *cv = localeconv();
+  // struct lconv *cv = localeconv();
@@ -183 +183 @@
-  ls->decpoint = (cv ? cv->decimal_point[0] : '.');
+  ls->decpoint = '.';//(cv ? cv->decimal_point[0] : '.');
			}
				patches.each do |p|
					puts "Applying patch "
					ok = Exec.run "patch", "-p1", {:stdin => p}
					unless ok
						raise "One patch failed to apply."
					end
				end
			end


			params = []
			params << "CC=#{@library.options.CC}" if @library.options.CC.length > 0
			params << "AR=#{@library.options.AR}" if @library.options.AR.length > 0

			params << "RANLIB=\"#{@library.options.RANLIB}\"" if @library.options.RANLIB.length > 0
			params << "CFLAGS=#{@library.options.CFLAGS}" if @library.options.CFLAGS.length > 0
			params << "LDFLAGS=#{@library.options.LDFLAGS}" if @library.options.LDFLAGS.length > 0
			Exec.run(env, @make, "-Csrc/", "a", *params)
		end
	end
	class LuaInstaller < LBT::Step
		def initialize platform, make
			@platform = platform
			@make = make
		end
		def run
			Dir.chdir "#{@library.work_dir}/#{@library.build_subdir}"
			# Manually do the install...
			#Exec.run @make, @platform, "install", "INSTALL_TOP=#{@library.options.install_dir.join}"
			inc_dir = "#{@library.options.install_dir.join}/include"
			lib_dir = "#{@library.options.install_dir.join}/lib"
			FileUtils.mkdir_p(inc_dir)
			FileUtils.mkdir_p(lib_dir)
			['lua.h', 'luaconf.h', 'lualib.h', 'lauxlib.h'].each do |header|
				FileUtils.copy File.join("src", header), inc_dir
			end
			FileUtils.copy File.join("etc", "lua.hpp"), inc_dir
			FileUtils.copy File.join("src", "liblua.a"), lib_dir
			true
		end
	end

	library.builder   = LuaBuilder.new(platform, make)
	library.installer = LuaInstaller.new(platform, make)
end
